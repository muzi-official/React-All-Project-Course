{"version":3,"sources":["images/weather.png","images/location.png","App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","dark","setMode","city","setCity","search","setSearch","useEffect","a","url","fetch","response","json","resJson","main","weather","fetchApi","className","type","onChange","id","value","placeholder","aria-label","event","target","src","alt","temp","location","temp_min","temp_max","pressure","humidity","feels_like","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAAe,MAA0B,oCCA1B,MAA0B,qC,OCsF1BA,EAlFH,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACTC,EADS,KACHC,EADG,OAEQF,mBAAS,MAFjB,mBAETG,EAFS,KAEHC,EAFG,OAGYJ,mBAAS,WAHrB,mBAGTK,EAHS,KAGDC,EAHC,KAehB,OAVAC,qBAAU,YACM,uCAAG,gCAAAC,EAAA,6DACTC,EADS,4DACkDJ,EADlD,iEAEQK,MAAMD,GAFd,cAETE,EAFS,gBAGOA,EAASC,OAHhB,OAGTC,EAHS,OAIfT,EAAQS,EAAQC,KAAMD,EAAQE,SAJf,2CAAH,qDAMdC,KACC,CAACX,IAGF,mCACE,qBAAKY,UAAU,YAAf,SACE,qBAAKA,UAAU,4DAAf,SACC,qBAAKA,UAAU,WAAf,SACA,sBAAKA,UAAWhB,EAAO,gBAAkB,OAAzC,UACG,qBAAKgB,UAAU,sBAAf,SACE,wBAAOA,UAAU,SAAjB,UACE,uBAAOC,KAAK,WAAWC,SAAU,kBAAIjB,GAASD,MAC9C,sBAAMgB,UAAU,sBAIpB,sBAAMA,UAAU,SAAhB,SACE,uBACEG,GAAG,SACHC,MAAOhB,EACPY,UAAU,oBACVC,KAAK,SACLI,YAAY,SACZC,aAAW,SACXJ,SAAU,SAACK,GACTlB,EAAUkB,EAAMC,OAAOJ,YAK7B,qBACEJ,UAAU,uCACVS,IAAKX,EACLY,IAAI,iBAGJxB,EAGA,sBAAKc,UAAU,OAAf,UACE,+BACE,mBAAGA,UAAU,uBACZZ,KAEH,+BACGF,EAAKyB,KADR,UAEE,qBAAKF,IAAKG,EAAUF,IAAI,gBAG1B,wCACSxB,EAAK2B,SADd,mBACqC3B,EAAK4B,SAD1C,UACwD,OAGxD,6CAAgB5B,EAAK6B,YACrB,6CAAgB7B,EAAK8B,YAErB,+CAAkB9B,EAAK+B,cAEvB,qBAAKjB,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,kBAvBjB,0DCzCCkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.945760eb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/weather.b387e9b7.png\";","export default __webpack_public_path__ + \"static/media/location.e94f938d.png\";","import React, { useEffect, useState } from \"react\";\nimport weather from \"../src/images/weather.png\";\nimport location from \"../src/images/location.png\";\n\nconst App = () => {\n  const [dark, setMode] = useState(false) \n  const [city, setCity] = useState(null);\n  const [search, setSearch] = useState(\"karachi\");\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=8a13df165f9099bdd3008e66764b2a56`;\n      const response = await fetch(url);\n      const resJson = await response.json();\n      setCity(resJson.main, resJson.weather);\n    };\n    fetchApi();\n  }, [search]);\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row align-items-center text-center justify-content-center\">\n         <div className=\"col-md-4\">\n         <div className={dark ? \"darkmode main\" : \"main\"}>\n            <div className=\"col-md-12 switchBtn\">\n              <label className=\"switch\">\n                <input type=\"checkbox\" onChange={()=>setMode(!dark)}/>\n                <span className=\"slider round\"></span>\n              </label>\n            </div>\n\n            <form className=\"d-flex\">\n              <input\n                id=\"search\"\n                value={search}\n                className=\"form-control me-2\"\n                type=\"search\"\n                placeholder=\"Search\"\n                aria-label=\"Search\"\n                onChange={(event) => {\n                  setSearch(event.target.value);\n                }}\n              />\n            </form>\n\n            <img\n              className=\"img_weather img-responsive img-fluid\"\n              src={weather}\n              alt=\"Weather Logo\"\n            />\n\n            {!city ? (\n              <p>No Data Found</p>\n            ) : (\n              <div className=\"info\">\n                <h2>\n                  <i className=\"fas fa-street-view\"></i>\n                  {search}\n                </h2>\n                <h1>\n                  {city.temp}°Cel\n                  <img src={location} alt=\"location\" />\n                </h1>\n\n                <h3>\n                  Min : {city.temp_min}°Cel | Max : {city.temp_max}°Cel{\" \"}\n                </h3>\n\n                <h4>Pressure : {city.pressure}</h4>\n                <h4>Humidity : {city.humidity}</h4>\n\n                <h4>Feels-Like : {city.feels_like}</h4>\n\n                <div className=\"wave one\"></div>\n                <div className=\"wave two\"></div>\n                <div className=\"wave three\"></div>\n              </div>\n            )}\n          </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}